---
title: "RStudio intro and tips"
author: "Mariana Montes"
date: 2025-06-26
format:
  revealjs:
    theme: simple
    embed-resources: true
    title-slide-attributes: 
      data-background-image: img/title-background.png
    parallax-background-image: img/normal-background.png
---

## Outline

- Projects
- Panes
- Settings
- Add-ins

::: callout-tip
![](img/github-mark.svg){width=5% height=5%} Slides and examples available at github.com/montesmariana/rstudio-intro
:::
# Projects

## Projects: what?

- Folders with an .Rproject file inside.

- They can be a git repository at the same time.

- Easy to open and manage in R Studio

## Encapsultation

::: callout-tip
Keep your code, its inputs and outputs, its docs, all together. 
:::

- Open different projects in different windows without them interacting with each other.

- Reopening a project in RStudio can keep the same files open.

- The root of the project is the root of the file explorer.

## Reproducibility

::: callout-tip
Let a set of data and code to move around together, so that others can run it or you can run it somewhere else.
:::

- With `{here}`, use paths relative to the root of the project, independent of where the project lives in a particular computer.

- In non-HPC systems, `{renv}` is a good way of keeping track of the packages for a certain project and their versions.

# Panes

## Panes

- Source, eventually dataframe views
- **Console**, terminal, background jobs
- History, environment, packages, git...
- Files, plots, help, tutorials (for `{learnr}`), viewer, presentation

::: callout-tip
The order and organization can be changed in Tools > Global options
:::

## Terminal

::: callout-note
### What for?

For bash operations, for users with terminal experience.
:::

- For git, users with little experience may prefer the GUI in the other panel
- For file manipulation, users might prefer the file explorer

## History

::: callout-note
### What?

What has happened in the console
:::

- Recommendation: uncheck "Always save history".

- If someone comes to you with mysterious problems, the first step to reproduce is to restart the session with a clean history (and environment)

## Environment


::: callout-note
### What?

Available variables and functions in the global environment.

:::

- Recommendation: uncheck "Restore .Rdata into workspace"

## Console

::: callout-note
### What for?

Interactive typing of code and where code that is run shows up.

:::

- You can go up the history

- Unhandy for multiple lines - clean with Ctrl + L

- It won't survive across sessions.

- Very handy for exploring the use of functions, the content of variables (things that print and that don't need/have to be in scripts)

## Help: what and how

- where you can see the documentation of functions.

- You can search for a function in a search box, or more typically by typing `?` and the function:

    + `?print` for usage of the base `print` function
    + `?stringr::str_count` or `?str_count` if the package was loaded

## Help: Package documentation

- R functions are typically very thoroughly documented, but older (e.g. base) documentation is often quite cryptic.

- Tidyverse functions have very nice documentation, vignettes, examples...
  - These functions also tend to have prefixes for each package (for autocomplete and searching)

- Packages with datasets also document the datasets!

## Plots: what

- If you plot something interactively (unlike @fig-plot) it will show up in this panel

```{r}
#| label: fig-plot
#| fig-cap: A plot in a document
plot(1:10, 11:20)
```


## Plots: packages

- The base `plot()` will render it in whatever size the panel has, so you may get an error if the panel is too small: `Error in plot.new(): figure margins too large`.

- `ggplot2::ggplot()` and family won't care about the size of the panel, and you can resize it after rendering without errors.

## Source

::: callout-note
### What?

Where you write your source code, but also view any other plain text file.
:::

- Open a dataframe in this panel:
    + `View(variable)`
    + Clicking on the variable in Environment

- Other files you can view: plain text, markdown (and Rmd, qmd...), python...

## Source: keyboard shortcuts

- Ctrl+F to search for things in a file.

- Ctrl+Shift+F to search in a *project*.

- Ctrl+F7 to open an extra source panel

## Source: R files

- Ctrl+Shift+C (or appropriate character) to (un)comment
- Alt+- for the assignment operator `<- `
- Ctrl+Shift+M for the pipe `|>` (or `%>%`)
- Ctrl+Enter to run and go to next line/block
- Automatic outline and sections: hierarchical comments with `# Heading ####`
    + More `#` at the beginning increase level
    + At least four `#`, `=` or `-` at the end
- Inline debugger


# Settings

## Tools > Global options

- Graphic engine (e.g. agg for emojis in plots ðŸ˜Š)
- Appearance
- Pipe operator! (Native: `|>` vs magrittr (`%>%`)
- Git (e.g. SSH key)
- (Not) storing history and data

# Add-ins

## Some packages with add-ins

<!-- IDEA: illustrate interactively -->

- `{todor}` for comments with "TODO" and stuff to keep track of notes
- `{reprex}` to generate reproducible examples
- `{learnr}` fills in the Tutorial tab

<!-- TODO: thank audience -->
